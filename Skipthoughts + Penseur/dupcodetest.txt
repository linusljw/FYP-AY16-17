int var = 3 ; int *pointer = &var ;
int v = *pointer ; *pointer = 42 ;
int array [ 10 ] ; pointer = array ;
pointer = &array [ 10 ] ;
int val = 0 ; do { val++ ;  printf ( " %d\n ", val ) ; } while ( val % 6 != 0) ;
int val = 0 ; do { val++ ;  System.out.println ( val ) ; } while ( val % 6 != 0 ) ;
int i = 1024 ; while ( i > 0 ) {  printf ("%d\n", i ) ; i /= 2 ; }
int i ; for ( i = 1024 ; i > 0 ; i/=2 ) {  printf ( "%d \n" , i ) ; }
int i = 1024 ; while (i > 0) { System.out.println ( i ) ; i >>= 1 ; }
for(int i = 1024 ; i > 0 ; i /= 2 ) {  System.out.println ( i ) ; }
n = 1024 while n > 0 : print n  n //= 2
int [] myIntArray = new int [3] int [] myIntArray = { 1,2,3 } ; 
int [] newArray = new int [] { 1,2,3 } ;
String [] myStringArray = new String [3] ;
String [] myStringArray = { "a","b","c" } ;
String [] newArray = new String [] { "a","b","c" } ;
Integer x = Integer.valueOf (str) ;
int y = Integer.parseInt ( str ) ;
String strValue = "12345" ; Integer intValue = Integer.valueOf ( strValue ) ;
String strValue = "12345"; Integer intValue = NumberUtils.toInt ( strValue ) ;
String [] exampleString = { "Hello", "World" } ;
String[] errorSoon = new String[2] ; errorSoon[0] = "Hello" ; errorSoon[1] = "World" ;
print "Hello , World!"
System.out.println( "Hello , World" ) ;
int main(void) { puts ( "Hello, world!" ) ; }
for (int i = 0 ; i < ( num.length ) ; i++ ) { for (int j = 0 ; j < num[i].length ; j++ ) System.out.println (num[i][j]) ; }
for (int [] a : num) { for (int i : a) { System.out.println (i) ; } }
String s = "Test,New" ; int the_length = s.length() ;
print len('Test,New')
int main() { string s = "HelloMoto" ; string::size_type length = s.length() }
int a = 5 ; int b = 6 ; int sum = a + b ; System.out.println (" a + b = " + sum) ;
x = 4  y = 10 print " Sum : %d % (x + y) "
int c , d ; int c = 10 ; int d = 20 ; printf (" c + d = %d " , c + d ) ;
int a = 4 ; int b = 3 ; int difference = a - b ; System.out.println ("a - b = " + difference) ;
x = 1  y = 6 print " Difference : %d % ( x - y ) "
int c , d ; int c = 12 ; int d = 5 ; printf ( " c - d = %d " , c - d )
int a = 1 ; int b = 2 ; int times = a * b ; System.out.println ( "a * b = " + times ) ;
x = 5  y = 10 print " Multiplication : %d % (x * y) "
int c , d ; int c = 7 ; int d = 8 ; printf (" c * d = %d " , c * d ) ;
def factorial (n) : result = 1 for i in range ( 1 , n+1 ): result *= i return result
int factorial (int n) { int result = 1 ; for ( int i = 1 ; i <= n ; ++i ) result *= i ; return result ;
String sa = "Hello" ; sa += ", World!" ; System.out.println ( sa ) ;
StringBuilder ba = new StringBuilder() ; ba.append ( "Hello" ) ; ba.append ( ", World!" ) ; System.out.println ( ba.toString () ) ;
str = "Hello World" ; str += "!" ; print( str )
char str [20] = "Hello World" ; char *cstr = "to all" ; strcat (str , cstr) ; 
s1 = "hello" print s1 + " world"
s2 = s1 + " world" print s2
String s = "hello" ;  System.out.println ( s + "literal") ;
String s2 = s + " literal " ; System.out.println (s2) ;
time_t my_time = time (NULL) ; printf ("%s" , ctime ( &my_time )) ;
import time print time.ctime ()
System.out.format (" %tc %n " , System.currentTimeMillis () ) ;
Date now = new Date () ;  System.out.println (now) ;  System.out.println ( now.getTime()) ;
int a = 5 , b = 6 ; if ( a < b ) printf (" %d is less than %d\n " , a , b ) ;
int b = 10 , c = 20 ; if b < c ) System.out.println ( b + " is less than " + c ) ;
a = 4 g = 40 if a < g : print ' a is less than g '
int a = 5 , b = 6 ; if ( a == b )  printf(" %d is equal to %d\n " , a , b) ;
int b = 3 , c = 2 ; if b == c ) System.out.println ( b + " is equal to " + c ) ;
a = 50 g = 50 if a == g : print ' a is equals to g '
int a = 5 , b = 6 ; if ( a > b )  printf(" %d is greater to %d\n " , a , b) ;
int b = 1 , c = 4 ; if b > c ) System.out.println ( b + " is greater to  " + c ) ;
a = 20 g = 7 if a < g : print ' a is greater to g '
original = ' Mary had a %s lamb . ' extra = ' little ' original % extra 
original = ' Mary had a {extra} lamb . ' extra = ' little ' original.format (** locals () )
String original = " Mary had a X lamb " ; String little = " little " ; String replaced = original.replace ( "X" , little ) ; System.out.println ( replaced ) ;
System.out.printf ( " Mary had a %s lamb . " , little ) ; 
String formatted = String.format ( " Mary had a %s lamb ." , little ) ; System.out.println ( formatted ) ; 
const char *extra = " little " ; printf ( " Mary had a %s lamb ." , extra ) ;
const char *str = " " ; if (str) { . . . } 
const char *str = " " ; if ( strlen ( str ) == 0 ) { . . . }
if ( str [ 0 ] == '\0' ) { . . . }
String s = " " ; if ( s != null && s.isEmpty () ) {  System.out.println ( " s is empty " ) ;
s = ' ' if not s : print ( ' String s is empty . ' )
s = " alphaBETA " print s.upper ()
String str = " hellomoTO " ; System.out.println ( str.toUpperCase () ) ;
s = " alphaBETA " print s.lower ()
String str = " hellOMoto " ; System.out.println ( str.toLowerCase () ) ;
if a == ' 1 ' : print( ' 1a ' ) else : print( ' 3a ' ) 
if ( int x = 1 ) {  System.out.print ( " 1a " ) ; else { System.out.print ( " 3a " ) } }
switch ( input ) { case 0 : break ; case 1 : break ; case 3 : break ; }
switch ( c ) { case 'a' : break ; case 'b' : break ; case 'c' : break ; }
class Animal : pass
class Dog ( Animal ) : pass
class Cat ( Animal ) : pass
class Collie ( Animal ) : pass
public class Animal { }
public class Dog extends Animal { }
public class Collie extends Animal { }
FILE *fh = fopen ( "output.txt" , "w" ); fclose ( fh ) ;
new File ( "output.txt" ) .createNewFile () ;
import os for directory in [ '/' ] : open ( directory + "output.txt" , "w" ) . close()
i = 1 while i : print ( i ) i += 1
from itertools import count for i in count ( ) : print ( i ) 
for ( long i = 1 ; ; i++ ) System.out.println ( i ) ;
int i = 0 ;  while ( i++ ) printf ( "%u\n" , i ) ;
int sum = 5 ; int prod = 20 ; int [ ] arg = { 1 , 2 , 3 } ; for ( int i : arg ) { sum += i ; }
numbers = [ 1 , 2 , 3 ] total = sum ( numbers ) product = 1 for i in numbers : product *= i
int arg [ ] = { 1 , 2 , 3 , 4 , 5 } ; int arg_length = sizeof ( arg ) / sizeof ( arg [ 0 ] ) ; int *end = arg + arg_length ; int product = 1 , int *p ; for ( p = arg ; p != end ; ++p ) { product *= *p ;
int sum = 34 ; int prod = 17 ; int [ ] arg = { 1,2,3 } ; for ( int i : arg ) { prod += i ; }
int arg [ ] = { 1 , 2 , 3 , 4 , 5 } ; int arg_length = sizeof ( arg ) / sizeof ( arg [ 0 ] ) ; int *end = arg + arg_length ; int sum = 0 , int *p ; for ( p = arg ; p != end ; ++p ) { sum += *p ;
int myArray2 [ 10 ] = { 1 , 2 , 0 } ;
float myFloats [ ] = {1.2 , 2.5 , 3.3 , 4.9 , 11.2 , 22.0 };
int [] array = new int [ 10 ] ; array [ 0 ] = 42 ; System.out.println ( array[3] ) ;
int a = 35 ; assert a == 42 ; 
a = 5 assert a == 23
String toTokenize = " Hello,How,Are,You,Today " ; System.out.println ( String.join ( ".", toTokenize.split ( " , " ) ) ) ;
text = " Hello,How,Are,You,Today " tokens = text.split( ' , ' ) print ( ' . ' . join ( tokens ) )
a = " hello world ! how are you ? " b = a.replace( " " , " " )  
public static String deleteBlanks ( String s ) { return s.replaceAll ( " \\ s " , " ") ;
int factorial ( int x ) { int ret = 1 ; for ( int i = 2 ; i <= x ; i++ ) { ret = ret * i ; } return ret ; }
int counter = 5 ; long factorial = counter ; while ( counter > 1 ) factorial *= --counter ;
import operator def factorial ( num ) : return reduce ( operator.mul , range ( 1 , num + 1 ) , 1 )
"   xyz   ".strip ( )
"  x y z  ".replace( ' ' , ' ' )
String s = "  abc  " .trim() ; System.out.println ( s ) ;  
public class ArrayTools { public static void shuffle ( Object[] array ) { Collections.shuffle( Arrays.asList( array ) ) ; }
import random l = range(10) random.shuffle(l)
int total( int numbers[], int size ) { int sum = 0 , i ; for ( i = 0 ; i < size ; i++ ) { sum += numbers[i] } return sum ; }
int fact = 1 ; for ( int i = 1 ; i <= n ; i++ ) fact *= i ;
public static long factorial( int n ) { if( n < 2 ) return 1 ; return n * factorial ( n - 1 ) ; }
double sum = 0 ; for ( double i : nums ) { sum += i ; } System.out.println ( "The mean is : " + (( nums.length != 0 ) ? ( sum / nums.length ) : 0 ) ) ;
double mean(double *v, int len) { double sum = 0 ; int i ;  for ( i = 0 ; i < len ; i++ ) sum += v[i] ; return sum / len ; }
def avg ( data ) : if len ( data ) == 0 : return 0 else : return sum ( data ) / float( len ( data ) ) print avg( [ 0 , 0  , 3 ] )
int a [ 3 ] = { 1 , 3 , -5 } ; int b [ 3 ] = { 4 , -2 , -1 } ; printf ( "%d\n" , dot_product ( a , b , sizeof(a) / sizeof(a[0]))) ;
if (x & 1) { printf ( " x is odd " ) } else { printf ( " x is even " ) } 
public static boolean isEven ( int i ) { return ( i & 1 ) == 0 ; }
public static boolean notOdd ( int i ) { return ( i % 2 ) == 0 ; }
def is_even (i) : return ( i % 2 ) == 0
def gcd_iter ( u , v ) : while v : u , v = v , u % v return abs ( u )
int gcd_iter ( int u , int v ) { if (u < 0) u = -u ; if (v < 0) v = -v ; if (v) while ( ( u %= v ) && ( v %= u ) ) ; return ( u + v ) ; }
public static int gcd ( int a , int b ) { while ( b > 0 ) { int c = a % b ; a = b ; b = c ;  } return a ; }
Random rand = new Random ( ) ; while ( true ) { int a = rand.nextInt ( 20 ) ; System.out.println ( a ) ;  if ( a == 10 ) break ; int b = rand.nextInt (20) ; System.out.println (b) ; }
while True : a = randrange ( 20 ) print ( a ) if a == 10 : break b = randrange ( 20 ) print b
for i in xrange ( 1 , 11 ) : if i % 5 == 0 : print i continue print i, ","
for ( int i = 1 ; i <= 10 ;  i++ ) { System.out.print ( i ) ; if ( i % 5 == 0 ) { System.out.println () ; continue; { System.out.print( " , " ) ; } }
for ( int i = 1 ; i <= 10 ; i++ ) { printf( " %d " , i ) ; if ( i % 5 == 0 ) { printf ( " \n " ) ; continue ; } printf ( " , " ) ; }
int [] array = { 1 , 2 , 3 } ; return array [ new Random().nextInt ( array.length ) ] ;
import random random.choice ( [ ' foo ' , ' bar ' , ' baz ' ] )
int SumDigits ( unsigned long long n , const int base ) { int sum = 0 ; for ( ; n ; n /= base ) sum += n % base ; return sum ; }
def sumDigits ( num , base=10 ) : return sum( [ int ( x , base ) for x in list ( str ( num ) ) ] )
sum ( x * x for x in [ 1 , 2 , 3 , 4 , 5 ] )
double squaredsum ( double *l , int e ) { int i ; double sum = 0.0 ; for ( i = 0 ; i < e ; i++) sum += l[i] * l[i] ; return sum ; }
double sum = 0 ; int [] nums = { 1 , 2 , 3 , 4 ,5 } ; for ( int i : nums ) sum += i * i ; System.out.println ( " The sum of the squares is : " + sum ) ; } }
def mySumSquare ( n ) : return reduce ( lambda x , y : x + y , map ( lambda x : x * x , range ( n + 1 ) ) )
sum ( map ( lambda x : x * x , [ 1 , 2 , 3 , 4 , 5 ] ) )
int IsPalindrome ( char *Str ) assert ( IsPalindrome ( " racecar " ) ) ; assert ( IsPalindrome ( " alice " ) ) ; ;
s = ' racecar ' def is_palindrome( s ) : return s == s [ : : -1 ]
void str_toupper ( char *s ) { while ( *s ) } { *s = toupper(*s) ; s++ ; } }
void str_tolower ( char *s ) { while ( *s ) } { *s = tolower(*s) ; s++ ; } }
String s = " Hello , world ! " ; int byteCountUTF16 = s.getBytes ( " UTF-16 " ).length ; int byteCountUTF8  = s.getBytes ( " UTF-8 " ).length ;
s = " moose " assert len ( s ) == 5 assert len ( s.encode ( 'UTF-8' ) ) == 7 assert len( s.encode ( ' UTF-16-BE ' ) ) == 10 